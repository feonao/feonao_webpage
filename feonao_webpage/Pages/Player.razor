@page "/music"
@inject IJSRuntime JS
@inject IHostEnvironment _env

<PageTitle>@PageTitleName</PageTitle>

<div class="row">
    <div class="column" style="background-color:black">
        <div class="divBorder">
            <p class="fitText">No image</p>
            <img src="@CurrentTrackArtwork" class="fit" />
        </div>
        
        <br />
        <h1 class="h1center">@CurrentTrackName</h1>
        <p class="pcenter">Platform: @CurrentTrackPlatform</p>
        <p class="pcenter">Year: @CurrentTrackYear</p>
        <br />
    </div>
    <div class="column" style="background-color:white">
        
            <ul class="li-ul_center list-group list-group-flush">
                <li class="li-ul_center list-group-item">
                    <audio class="audiocenter"
                            id="audioPlayer"
                            controls="controls"
                            controlsList="noplaybackrate nodownload"
                            @onended="TrackEndedEvent"
                            @onplay="PausePlayEvent"
                            @onpause="PausePlayEvent">
                    </audio>
                </li>
            @if (TrackList != null && IsTrackListLoaded)
            {
                @foreach (var track in TrackList)
                {
                    <li class="li-ul_center list-group-item @BackgroundTextColor(track) @BackgroundColor(track)"
                        role="button" 
                        onclick="@(() => ChangeSong(track))">

                        <span 
                            class="@track.State">
                        </span>

                        @(TrackList.IndexOf(track) + 1).
                        @track.Name
                    </li>
                }
            }
            else
            {
                <li />
                <li class="h1center"><div class="lds-dual-ring"></div></li>
                <li class="h1article text-secondary">Loading...</li>
            }
            </ul>
    </div>
</div>

<br />

<p class="copyright">Copyright ©@DateTime.Now.Year feonao. All rights reserved.</p>

@code
{
    #region [Private fields]
    private readonly string musicFolderPath = "/music";
    private List<Sound> _trackList = new();
    private Sound? _currentTrack;
    private bool _isAutoplay;
    private bool _isTrackListLoaded;
    #endregion

    #region [Initialization]
    // protected override async Task OnInitializedAsync()
    // {
    //     FileStream jsonStream = File.OpenRead("wwwroot/playlist_main.json");

    //     TrackList = await JsonSerializer.DeserializeAsync<List<Sound>>(jsonStream) ?? new();

    //     await InvokeAsync(StateHasChanged);
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FileStream jsonStream = File.OpenRead("wwwroot/playlist_main.json");

            //Thread.Sleep(50);

            TrackList = await JsonSerializer.DeserializeAsync<List<Sound>>(jsonStream) ?? new();

            IsTrackListLoaded = true;

            CurrentTrack = await SetCurrentTrackAsync(TrackList.FirstOrDefault());

            await InvokeAsync(StateHasChanged);
        }
    }
    #endregion

    #region [Properties]
    // public string? SongPath
    // {
    //     get { return CurrentTrack != null ? CurrentTrack.Url : ""; }
    // }

    public List<Sound> TrackList
    {
        get { return _trackList; }
        set { _trackList = value; }
    }

    public bool IsTrackListLoaded
    {
        get { return _isTrackListLoaded; }
        set { _isTrackListLoaded = value; }
    }

    public Sound? CurrentTrack
    {
        get { return _currentTrack; }
        set { _currentTrack = value; }
    }

    public bool IsAutoplay
    {
        get { return _isAutoplay; }
        set {  _isAutoplay = value; }
    }

    public string CurrentTrackName
    {
        get { return CurrentTrack != null ? CurrentTrack.Name : "—"; }
    }

    public string PageTitleName
    {
        get { return CurrentTrack != null ? $"> {CurrentTrack.Name}" : "Listen to feonao"; }
    }

    public string CurrentTrackPlatform
    {
        get { return CurrentTrack != null ? CurrentTrack.Platform : "—"; }
    }

    public string CurrentTrackYear
    {
        get { return CurrentTrack != null ? CurrentTrack.Year : "—"; }
    }

    public string CurrentTrackArtwork
    {
        get { return CurrentTrack != null ? CurrentTrack.Artwork : ""; }
    }
    #endregion

    #region [Events]
    private async void ChangeSong(Sound track)
    {
        if (CurrentTrack == track)
        {
            await JS.InvokeVoidAsync("ChangePlayerState", CurrentTrack.Url);
        }
        else
        {
            CurrentTrack = await SetCurrentTrackAsync(TrackList.Where(sound => sound == track).FirstOrDefault());
        }

        if (!IsAutoplay)
            IsAutoplay = await SetAutoplayAsync(true);


        await InvokeAsync(StateHasChanged);
    }

    public async void PausePlayEvent()
    {
        IsAutoplay = await SetAutoplayAsync(true);

        foreach (Sound sound in TrackList)
        {
            if (sound == CurrentTrack && IsAutoplay)
                sound.ChangeState();
            else
                sound.SetPlay();
        }

        await InvokeAsync(StateHasChanged);
    }

    public async void TrackEndedEvent()
    {
        int nextTrackNum = 0;

        if (CurrentTrack != null && TrackList.Contains(CurrentTrack))
            nextTrackNum = TrackList.IndexOf(CurrentTrack) + 1;

        if (nextTrackNum != 0 && TrackList.Count > nextTrackNum)
        {
            CurrentTrack = await SetCurrentTrackAsync(TrackList[nextTrackNum]);
        }
        else
        {
            IsAutoplay = await SetAutoplayAsync(false);

            await InvokeAsync(StateHasChanged);

            CurrentTrack = await SetCurrentTrackAsync(TrackList.FirstOrDefault());
        }

        await InvokeAsync(StateHasChanged);
    }
    #endregion

    #region [Methods]
    private String BackgroundColor(Sound track)
    {
        return track.BackgroundColor(track == CurrentTrack);
    }

    private String BackgroundTextColor(Sound track)
    {
        return track.BackgroundTextColor(track == CurrentTrack);
    }

    private async Task<bool> SetAutoplayAsync(bool isAutoplay)
    {
        await JS.InvokeVoidAsync("SetAutoPlay", isAutoplay);

        return isAutoplay;
    }

    private async Task<Sound?> SetCurrentTrackAsync(Sound? track)
    {
        if (track != null)
            await JS.InvokeVoidAsync("SetSrc", track.Url);

        return track;
    }
    #endregion
}