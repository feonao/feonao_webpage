@page "/music"
@inject IJSRuntime JS
@inject IHostEnvironment _env

<PageTitle>@PageTitleName</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-lg p-2 bg-dark">
            <div class="border-box">
                <p class="text-middle font-main text-light fs-5">No image</p>
                <img src="@CurrentTrackArtwork" class="m-auto w-100 position-absolute top-0" />
            </div>

            <p class="text-center fs-4 font-main text-light mt-3">@CurrentTrackName</p>
            <p class="text-center fs-5 font-main text-light">Platform: @CurrentTrackPlatform</p>
            <p class="text-center fs-5 font-main text-light">Year: @CurrentTrackYear</p>
        </div>
        <div class="col-lg p-2 bg-dark">
            <audio class="w-100 bg-dark m-1"
                id="audioPlayer"
                controls="controls"
                controlsList="noplaybackrate nodownload"
                @onended="TrackEndedEvent"
                @onplay="PausePlayEvent"
                @onpause="PausePlayEvent">
            </audio>

            <ul class="text-light font-main fs-5 list-group list-group-flush bg-dark ">
                @if (TrackList != null && IsTrackListLoaded)
                {
                    @foreach (var track in TrackList)
                    {
                        <li class="fs-5 font-main list-group-item @BackgroundTextColor(track) @BackgroundColor(track)"
                            role="button" 
                            onclick="@(() => ChangeSong(track))">

                            <span 
                                class="@track.State">
                            </span>

                            @(TrackList.IndexOf(track) + 1).
                            @track.Name
                        </li>
                    }
                }
                else
                {
                    <li class="text-center mt-3"><div class="lds-dual-ring"></div></li>
                    <li class="text-center fs-4 text-secondary">Loading...</li>
                }
                </ul>
        </div>
    </div>
</div>

<p class="fs-6 mt-3 text-center">Copyright ©@DateTime.Now.Year feonao. All rights reserved.</p>

@code
{
    #region [Private fields]
    private readonly string musicFolderPath = "/music";
    private List<Sound> _trackList = new();
    private Sound? _currentTrack;
    private bool _isAutoplay;
    private bool _isTrackListLoaded;
    #endregion

    #region [Initialization]
    // protected override async Task OnInitializedAsync()
    // {
    //     FileStream jsonStream = File.OpenRead("wwwroot/playlist_main.json");

    //     TrackList = await JsonSerializer.DeserializeAsync<List<Sound>>(jsonStream) ?? new();

    //     await InvokeAsync(StateHasChanged);
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FileStream jsonStream = File.OpenRead("wwwroot/playlist_main.json");

            //Thread.Sleep(50);

            TrackList = await JsonSerializer.DeserializeAsync<List<Sound>>(jsonStream) ?? new();

            IsTrackListLoaded = true;

            CurrentTrack = await SetCurrentTrackAsync(TrackList.FirstOrDefault());

            await InvokeAsync(StateHasChanged);
        }
    }
    #endregion

    #region [Properties]
    // public string? SongPath
    // {
    //     get { return CurrentTrack != null ? CurrentTrack.Url : ""; }
    // }

    public List<Sound> TrackList
    {
        get { return _trackList; }
        set { _trackList = value; }
    }

    public bool IsTrackListLoaded
    {
        get { return _isTrackListLoaded; }
        set { _isTrackListLoaded = value; }
    }

    public Sound? CurrentTrack
    {
        get { return _currentTrack; }
        set { _currentTrack = value; }
    }

    public bool IsAutoplay
    {
        get { return _isAutoplay; }
        set {  _isAutoplay = value; }
    }

    public string CurrentTrackName
    {
        get { return CurrentTrack != null ? CurrentTrack.Name : "—"; }
    }

    public string PageTitleName
    {
        get { return CurrentTrack != null ? $"> {CurrentTrack.Name}" : "Listen to feonao"; }
    }

    public string CurrentTrackPlatform
    {
        get { return CurrentTrack != null ? CurrentTrack.Platform : "—"; }
    }

    public string CurrentTrackYear
    {
        get { return CurrentTrack != null ? CurrentTrack.Year : "—"; }
    }

    public string CurrentTrackArtwork
    {
        get { return CurrentTrack != null ? CurrentTrack.Artwork : ""; }
    }
    #endregion

    #region [Events]
    private async void ChangeSong(Sound track)
    {
        if (CurrentTrack == track)
        {
            await JS.InvokeVoidAsync("ChangePlayerState", CurrentTrack.Url);
        }
        else
        {
            CurrentTrack = await SetCurrentTrackAsync(TrackList.Where(sound => sound == track).FirstOrDefault());
        }

        if (!IsAutoplay)
            IsAutoplay = await SetAutoplayAsync(true);


        await InvokeAsync(StateHasChanged);
    }

    public async void PausePlayEvent()
    {
        IsAutoplay = await SetAutoplayAsync(true);

        foreach (Sound sound in TrackList)
        {
            if (sound == CurrentTrack && IsAutoplay)
                sound.ChangeState();
            else
                sound.SetPlay();
        }

        await InvokeAsync(StateHasChanged);
    }

    public async void TrackEndedEvent()
    {
        int nextTrackNum = 0;

        if (CurrentTrack != null && TrackList.Contains(CurrentTrack))
            nextTrackNum = TrackList.IndexOf(CurrentTrack) + 1;

        if (nextTrackNum != 0 && TrackList.Count > nextTrackNum)
        {
            CurrentTrack = await SetCurrentTrackAsync(TrackList[nextTrackNum]);
        }
        else
        {
            IsAutoplay = await SetAutoplayAsync(false);

            await InvokeAsync(StateHasChanged);

            CurrentTrack = await SetCurrentTrackAsync(TrackList.FirstOrDefault());
        }

        await InvokeAsync(StateHasChanged);
    }
    #endregion

    #region [Methods]
    private String BackgroundColor(Sound track)
    {
        return track.BackgroundColor(track == CurrentTrack);
    }

    private String BackgroundTextColor(Sound track)
    {
        return track.BackgroundTextColor(track == CurrentTrack);
    }

    private async Task<bool> SetAutoplayAsync(bool isAutoplay)
    {
        await JS.InvokeVoidAsync("SetAutoPlay", isAutoplay);

        return isAutoplay;
    }

    private async Task<Sound?> SetCurrentTrackAsync(Sound? track)
    {
        if (track != null)
            await JS.InvokeVoidAsync("SetSrc", track.Url);

        return track;
    }
    #endregion
}