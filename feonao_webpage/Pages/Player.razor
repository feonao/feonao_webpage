@page "/music"
@page "/"
@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>@PageTitleName</PageTitle>
<div class="center">
    <img src="@CurrentTrackArtwork" class="fit" />
</div>

<br />
<h1>Now playing: @CurrentTrackName</h1>
<p>Platform: @CurrentTrackPlatform</p>
<p>Year: @CurrentTrackYear</p>
<br />

<div class="center">
    @if (TrackList != null)
    {
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <audio id="audioPlayer"
                    controls="controls"
                    src="@SongPath"
                    autoplay
                    controlsList="noplaybackrate nodownload"
                    @onended="TrackEndedEvent"
                    @onplay="PausePlayEvent"
                    @onpause="PausePlayEvent">
                </audio>
            </li>

            @foreach (var track in TrackList)
            {
                <li class="list-group-item">
                    <span onclick="@(() => ChangeSong(track))"
                  class="@track.State" role="button">
                    </span>
                    @(TrackList.IndexOf(track) + 1).
                    @track.Name
                </li>
            }
        </ul>
    }
</div>
<br />

@code
{
    #region [Private fields]
    private readonly string musicFolderPath = "/music";
    private List<Sound> _trackList = new();
    private Sound? _currentTrack;
    #endregion

    #region [Initialization]
    protected override async void OnInitialized()
    {
        TrackList = await Http.GetFromJsonAsync<List<Sound>>("playlist_main.json") ?? new();
        //CurrentTrack = TrackList[0];

        //await JS.InvokeAsync<object>("changePlayerState");
        await InvokeAsync(StateHasChanged);
    }
    #endregion

    #region [Properties]
    public string? SongPath
    {
        get { return CurrentTrack != null ? CurrentTrack.Url : ""; }
    }

    public List<Sound> TrackList
    {
        get { return _trackList; }
        set { _trackList = value; }
    }

    public Sound? CurrentTrack
    {
        get { return _currentTrack; }
        set { _currentTrack = value; }
    }

    public string CurrentTrackName
    {
        get { return CurrentTrack != null ? CurrentTrack.Name : "—"; }
    }

    public string PageTitleName
    {
        get { return CurrentTrack != null ? $"> {CurrentTrack.Name}" : "Listen to feonao"; }
    }

    public string CurrentTrackPlatform
    {
        get { return CurrentTrack != null ? CurrentTrack.Platform : "—"; }
    }

    public string CurrentTrackYear
    {
        get { return CurrentTrack != null ? CurrentTrack.Year : "—"; }
    }

    public string CurrentTrackArtwork
    {
        get { return CurrentTrack != null ? CurrentTrack.Artwork : ""; }
    }
    #endregion

    #region [Events]
    private async void ChangeSong(Sound track)
    {
        if (CurrentTrack == track)
            await JS.InvokeAsync<object>("changePlayerState");
        else
            CurrentTrack = TrackList.Where(sound => sound == track).FirstOrDefault();

        await InvokeAsync(StateHasChanged);
    }

    public async void PausePlayEvent()
    {
        foreach (Sound sound in TrackList)
        {
            if (sound == CurrentTrack)
                sound.ChangeState();
            else
                sound.SetPlay();
        }

        await InvokeAsync(StateHasChanged);
    }

    public async void TrackEndedEvent()
    {
        int nextTrackNum = 0;

        if (CurrentTrack != null && TrackList.Contains(CurrentTrack))
            nextTrackNum = TrackList.IndexOf(CurrentTrack) + 1;

        if (nextTrackNum != 0 && TrackList.Count > nextTrackNum)
            CurrentTrack = TrackList[nextTrackNum];
        else
            CurrentTrack = null;

        await InvokeAsync(StateHasChanged);
    }
    #endregion
}