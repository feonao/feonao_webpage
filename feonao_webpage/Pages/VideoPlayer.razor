@page "/video"
@inject DataService service

<PageTitle>feonao - Videos</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-lg p-2 bg-dark">
            <iframe src="@CurrentPath" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        </div>
        <div class="col-lg p-2 bg-dark">
            @if (TrackList != null && IsTrackListLoaded)
            {
                <ul class="text-black font-main fs-5 list-group list-group-flush">
                    @foreach (var video in TrackList)
                    {
                        <li class="fs-5 font-main list-group-item @BackgroundTextColor(video) @BackgroundColor(video)"
                            role="button"
                            onclick="@(() => ChangeVideo(video))">

                            @(TrackList.IndexOf(video) + 1).
                            @video.Name
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="text-center mt-3"><div class="lds-dual-ring"></div></div>
                <div class="text-center fs-4 text-secondary">Loading...</div>
            }
        </div>
    </div>
</div>

@code {
    #region [Private fields]
    private List<Video> _trackList = new();
    private Video? _currentVideo;
    private bool _isTrackListLoaded;
    #endregion

    #region [Initialization]
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TrackList = await service.GetVideoAsync() ?? new();

            IsTrackListLoaded = true;

            CurrentVideo = TrackList.FirstOrDefault();

            await InvokeAsync(StateHasChanged);
        }
    }
    #endregion

    #region [Properties]
    public List<Video> TrackList
    {
        get { return _trackList; }
        set { _trackList = value; }
    }

    public bool IsTrackListLoaded
    {
        get { return _isTrackListLoaded; }
        set { _isTrackListLoaded = value; }
    }

    public Video? CurrentVideo
    {
        get { return _currentVideo; }
        set { _currentVideo = value; }
    }

    public String CurrentPath
    {
        get { return CurrentVideo != null ? CurrentVideo.Url : ""; }
    }
    #endregion

    #region [Methods]
    private String BackgroundColor(Video video)
    {
        return video.BackgroundColor(video == CurrentVideo);
    }

    private String BackgroundTextColor(Video video)
    {
        return video.BackgroundTextColor(video == CurrentVideo);
    }

    private async void ChangeVideo(Video video)
    {
        CurrentVideo = TrackList.Where(media => media == video).FirstOrDefault();

        await InvokeAsync(StateHasChanged);
    }
    #endregion
}
