@page "/video"

<PageTitle>Videos</PageTitle>

<div class="row">
    <div class="column" style="background-color:black">
        <iframe src="@CurrentPath" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
    <div class="column" style="background-color:white">
        @if (TrackList != null && IsTrackListLoaded)
        {
            <ul class="li-ul_center list-group list-group-flush">
                @foreach (var video in TrackList)
                {
                    <li class="li-ul_center list-group-item @BackgroundTextColor(video) @BackgroundColor(video)"
                        role="button"
                        onclick="@(() => ChangeVideo(video))">

                        @(TrackList.IndexOf(video) + 1).
                        @video.Name
                    </li>
                }
            </ul>
        }
        else
        {
            <br />
            <div class="h1center"><div class="lds-dual-ring"></div></div>
            <div class="h1article">Loading...</div>
        }
    </div>
</div>

<br />

<p class="copyright">Copyright ©@DateTime.Now.Year feonao. All rights reserved.</p>

@code {
    #region [Private fields]
    private List<Video> _trackList = new();
    private Video? _currentVideo;
    private bool _isTrackListLoaded;
    #endregion

    #region [Initialization]
    // protected override async Task OnInitializedAsync()
    // {
    //     FileStream jsonStream = File.OpenRead("wwwroot/videolist_main.json");

    //     TrackList = await JsonSerializer.DeserializeAsync<List<Video>>(jsonStream) ?? new();

    //     CurrentVideo = TrackList.FirstOrDefault();

    //     await InvokeAsync(StateHasChanged);
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FileStream jsonStream = File.OpenRead("wwwroot/videolist_main.json");

            //Thread.Sleep(1000);

            TrackList = await JsonSerializer.DeserializeAsync<List<Video>>(jsonStream) ?? new();

            IsTrackListLoaded = true;

            CurrentVideo = TrackList.FirstOrDefault();

            await InvokeAsync(StateHasChanged);
        }
    }
    #endregion

    #region [Properties]
    public List<Video> TrackList
    {
        get { return _trackList; }
        set { _trackList = value; }
    }

    public bool IsTrackListLoaded
    {
        get { return _isTrackListLoaded; }
        set { _isTrackListLoaded = value; }
    }

    public Video? CurrentVideo
    {
        get { return _currentVideo; }
        set { _currentVideo = value; }
    }

    public String CurrentPath
    {
        get { return CurrentVideo != null ? CurrentVideo.Url : ""; }
    }
    #endregion

    #region [Methods]
    private String BackgroundColor(Video video)
    {
        return video.BackgroundColor(video == CurrentVideo);
    }

    private String BackgroundTextColor(Video video)
    {
        return video.BackgroundTextColor(video == CurrentVideo);
    }

    private async void ChangeVideo(Video video)
    {
        CurrentVideo = TrackList.Where(media => media == video).FirstOrDefault();

        await InvokeAsync(StateHasChanged);
    }
    #endregion
}
